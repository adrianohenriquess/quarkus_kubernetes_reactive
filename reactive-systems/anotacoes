Capitulo 2:
Fazer deploy automático no minikube:
Criar um projeto simples no code.quarkus.io

Adicionar as dependencias:
<dependency>
    <groupId>io.quarkus</groupId>
    <artifactId>quarkus-kubernetes</artifactId>
</dependency>
<dependency>
    <groupId>io.quarkus</groupId>
    <artifactId>quarkus-container-image-jib</artifactId>
</dependency>
<dependency>
    <groupId>io.quarkus</groupId>
    <artifactId>quarkus-minikube</artifactId>
</dependency>

Rodar os comandos:
$ minikube start
Habilitar o addon para metrics-server
$ minikube addons enable metrics-server
Expor o daemon do docker do minikube para não usar o da máquina local
$ eval $(minikube docker-env)
Executar o deploy da aplicação no minikube
$ mvn verify -Dquarkus.kubernetes.deploy=true
Verificar se os pods estão rodando
$ kubectl get pods

Verificar a porta em que o serviço foi exposto
$ minikube service code-with-quarkus --url

Verficar o consumo de memória do pod:
$ kubectl top pods


capitulo 8
Falando sobre testes de strees em aplicações com Rest reativo
não bloqueante

Crie esses endpoints no quarkus
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @NonBlocking
    public String hello() {
        return "Hello RESTEasy Reactive from " + Thread.currentThread().getName();
    }

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @Path("/blocking")
    @Blocking
    public String helloBlocking() {
        return "Hello RESTEasy Reactive from " +
                Thread.currentThread().getName();
    }

E para testar com 100 threads e 500 conexões durante 40 segundos com o wrk:
wrk -t 100 -c500 -d40s http://localhost:8080/hello-resteasy-reactive/blocking

Uni representa uma computação assíncrona que pode não ter produzido um resultado ainda. Quando
um endpoint retorna uma instância Uni, o Quarkus se inscreve nela e, quando o Uni emite o resultado, 
ele o grava na resposta HTTP. Se, infelizmente, o Uni emitir uma falha, a resposta HTTP transmite essa
falha como um erro interno do servidor HTTP, uma solicitação incorreta ou um erro de não encontrado,
dependendo da falha. Enquanto aguarda o resultado do Uni, a thread pode ser usada para lidar 
com outras solicitações.
